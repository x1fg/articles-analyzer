import asyncio
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command
from aiogram.types import Message
from datetime import datetime, timedelta
from sqlalchemy import func
from src.database.models import SessionLocal, Article
from src.config.settings import TELEGRAM_API_KEY

bot = Bot(token=TELEGRAM_API_KEY)
dp = Dispatcher()
router = Router()

dp.include_router(router)

async def start_bot():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞."""
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

def get_article_count_by_period(days=None):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    session = SessionLocal()
    query = session.query(func.count(Article.id))
    if days:
        since_date = datetime.now() - timedelta(days=days)
        query = query.filter(Article.published_date >= since_date)
    count = query.scalar()
    session.close()
    return count

def get_articles_by_period(days=None):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    session = SessionLocal()
    query = session.query(Article)
    if days:
        since_date = datetime.now() - timedelta(days=days)
        query = query.filter(Article.published_date >= since_date)
    articles = query.order_by(Article.published_date.desc()).all()
    session.close()
    return articles

def search_article_by_title(title):
    """–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
    session = SessionLocal()
    article = session.query(Article).filter(Article.title.ilike(f"%{title}%")).first()
    session.close()
    return article

@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—É—á–Ω—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç–µ–π\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –∑–∞ –º–µ—Å—è—Ü\n"
        "/search <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –ø–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏\n"
        "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, `/stats` –∏–ª–∏ `/search machine learning`"
    )

@router.message(Command("stats"))
async def stats_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats."""
    today_count = get_article_count_by_period(days=1)
    week_count = get_article_count_by_period(days=7)
    month_count = get_article_count_by_period(days=30)
    year_count = get_article_count_by_period(days=365)

    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç–µ–π:\n"
        f"–°–µ–≥–æ–¥–Ω—è: {today_count}\n"
        f"–ó–∞ –Ω–µ–¥–µ–ª—é: {week_count}\n"
        f"–ó–∞ –º–µ—Å—è—Ü: {month_count}\n"
        f"–ó–∞ –≥–æ–¥: {year_count}"
    )

@router.message(Command("list"))
async def list_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list."""
    query = message.text[len("/list "):].strip()
    if not query:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `/list LLM`",
            parse_mode="Markdown"
        )
        return

    session = SessionLocal()
    since_date = datetime.now() - timedelta(days=30)
    articles = session.query(Article).filter(
        Article.published_date >= since_date,
        Article.title.ilike(f"%{query}%")
    ).order_by(Article.published_date.desc()).all()
    session.close()

    if not articles:
        await message.answer(f"‚ùå –ù–µ—Ç —Å—Ç–∞—Ç–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{query}' –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.")
        return

    response = f"üìã –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{query}':\n"
    for article in articles[:10]:
        summary_link = f"[–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ]({article.summary_path})" if article.summary_path else "–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        response += (
            f"- {article.title} (–î–∞—Ç–∞: {article.published_date.date()})\n"
            f"  üîó [–û—Ä–∏–≥–∏–Ω–∞–ª —Å—Ç–∞—Ç—å–∏]({article.pdf_url}) | {summary_link}\n"
        )

    await message.answer(response, parse_mode="Markdown")

@router.message(Command("search"))
async def search_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search."""
    query = message.text[len("/search "):].strip()
    if not query:
        await message.answer("üîç –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    article = search_article_by_title(query)
    if not article:
        await message.answer(f"–°—Ç–∞—Ç—å—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    response = (
        f"üìÑ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç—å—è:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {article.title}\n"
        f"–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {article.published_date.date()}\n"
        f"üîó [–°–∫–∞—á–∞—Ç—å PDF]({article.file_path})\n"
        f"üîó [–û—Ä–∏–≥–∏–Ω–∞–ª —Å—Ç–∞—Ç—å–∏]({article.pdf_url})\n"
        f"\n–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {article.summary if article.summary else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
    )
    await message.answer(response, parse_mode="Markdown")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞."""
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
